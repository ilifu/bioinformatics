SB = 'singularity build'

BASES = ['bionic']
COMPILE = ['bionic_compile']
RS = ['bionic-R3.6.1', 'bionic-R3.6.3']
RSTUDIOS = [
  'bionic-R3.6.1-RStudio1.2.1335-astro',
  'bionic-R3.6.1-RStudio1.2.1335-bio',
  'bionic-R3.6.1-RStudio1.2.5001-bio',
  'bionic-R3.6.3-RStudio1.2.5042-bio',
]
SRA_TOOLS = ['bionic_compile-sra_tools2.9.6']
HTSLIBS = ['bionic-htslib1.9']
JAVAS = ['bionic-jdk8u221']
TENSORFLOWS = ['latest-gpu-py3-jupyter']

rule all:
    input:
        [f'{base}.simg' for base in BASES],
        [f'{compile}.simg' for compile in COMPILE],
        [f'R/{r}.simg' for r in RS],
        [f'R/RStudio/{rstudio}.simg' for rstudio in RSTUDIOS],
        [f'sra_tools/{sra_tool}.simg' for sra_tool in SRA_TOOLS],
        [f'java/{java}.simg' for java in JAVAS],
        [f'tensorflow/tensorflow_{tensorflow}.simg' for tensorflow in TENSORFLOWS]


rule base_images:
    input:
        'base-{base}.def'
    output:
        '{base}.simg'
    wildcard_constraints:
        base='[^_]+'
    shell:
        '{SB} {output} {input}'

rule all_bases:
    input:
        [f'{base}.simg' for base in BASES]

rule compile_images:
    input:
        compile='base-{base}_compile.def',
        base='{base}.simg'
    output:
        '{base}_compile.simg'
    shell:
        '{SB} {output} {input.compile}'

rule all_compile:
    input:
        [f'{compile}.simg' for compile in COMPILE]

rule R:
    input:
        rs='R/{base}-{r_version}.def',
        base='{base}_compile.simg'
    output:
        'R/{base}-{r_version}.simg'
    wildcard_constraints:
        base='[^-]+',
        r_version='[^-]+'
    shell:
        '{SB} {output} {input.rs}'

rule all_R:
    input:
        [f'R/{r_version}.simg' for r_version in RS]


rule RStudio:
    input:
        rstudios='R/RStudio/{base}-{r_version}-{rstudio}-{variant}.def',
        rs='R/{base}-{r_version}.simg'
    output:
        'R/RStudio/{base}-{r_version}-{rstudio}-{variant}.simg'
    wildcard_constraints:
        base='[^-]+',
        r_version='[^-]+',
        rstudio='[^-]+'
    shell:
        '{SB} {output} {input.rstudios}'

rule all_RStudio:
    input:
        [f'R/RStudio/{r_studio}.simg' for r_studio in RSTUDIOS]

rule sra_tools:
    input:
        tools='sra_tools/{base}-{sra_tools_version}.def',
        base_image='{base}.simg'
    output:
        'sra_tools/{base}-{sra_tools_version}.simg'
    wildcard_constraints:
        base='[^-]+',
        sra_tools_version='[^-]+'
    shell:
        '{SB} {output} {input.tools}'

rule all_sra_tools:
    input:
        [f'sra_tools/{sra_tools_version}.simg' for sra_tools_version in SRA_TOOLS]

rule htslib:
    input:
        htslibs='htslib/{base}-{htslib_version}.def',
        base='{base}_compile.simg'
    output:
        'htslib/{base}-{htslib_version}.simg'
    wildcard_constraints:
        base='[^-]+',
        htslib_version='[^-]+'
    shell:
        '{SB} {output} {input.htslibs}'

rule all_htslib:
    input:
        [f'htslib/{htslib_version}.simg' for htslib_version in HTSLIBS]

rule java:
    input:
        javas='java/{base}-{java_version}.def',
        base='{base}_compile.simg'
    output:
        'java/{base}-{java_version}.simg'
    wildcard_constraints:
        base='[^-]+',
        java_version='[^-]+'
    shell:
        '{SB} {output} {input.javas}'

rule tensorflow:
    input:
        'tensorflow/docker-tensorflow-{options}.def'
    output:
        'tensorflow/tensorflow_{options}.simg'
    shell:
        '{SB} {output} {input}'

rule all_tensorflows:
    input:
        [f'tensorflow/tensorflow_{tensorflow}.simg' for tensorflow in TENSORFLOWS]

