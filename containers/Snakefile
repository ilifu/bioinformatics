SB = 'singularity build'

BASES = ['bionic', 'bionic_compile']
RS = ['bionic-R3.6.0']
RSTUDIOS = ['bionic-R3.6.0-RStudio1.2.1335']
SRA_TOOLS = ['bionic_compile-sra_tools2.9.6']

rule all:
    input:
        [f'{base}.simg' for base in BASES],
        [f'R/{r}.simg' for r in RS],
        [f'R/RStudio/{rstudio}.simg' for rstudio in RSTUDIOS],
        [f'sra_tools/{sra_tool}.simg' for sra_tool in SRA_TOOLS]


rule base_images:
    input:
        'base-{base}.def',
    output:
        '{base}.simg',
    shell:
        '{SB} {output} {input}'

rule all_bases:
    input:
        [f'{base}.simg' for base in BASES]

rule R:
    input:
        rs='R/{base}-{r_version}.def',
        base='{base}.simg'
    output:
        'R/{base}-{r_version}.simg'
    wildcard_constraints:
        base='[^-]+',
        r_version='[^-]+'
    shell:
        '{SB} {output} {input.rs}'

rule all_R:
    input:
        [f'R/{r_version}.simg' for r_version in RS]


rule RStudio:
    input:
        rstudios='R/RStudio/{base}-{r_version}-{rstudio}.def',
        rs='R/{base}-{r_version}.simg'
    output:
        'R/RStudio/{base}-{r_version}-{rstudio}.simg'
    wildcard_constraints:
        base='[^-]+',
        r_version='[^-]+',
        rstudio='[^-]+'
    shell:
        '{SB} {output} {input.rstudios}'

rule all_RStudio:
    input:
        [f'R/RStudio/{r_studio}.simg' for r_studio in RSTUDIOS]

rule sra_tools:
    input:
        tools='sra_tools/{base}-{sra_tools_version}.def',
        base_image='{base}.simg'
    output:
        'sra_tools/{base}-{sra_tools_version}.simg'
    wildcard_constraints:
        base='[^-]+',
        sra_tools_version='[^-]+'
    shell:
        '{SB} {output} {input.tools}'

rule all_sra_tools:
    input:
        [f'sra_tools/{sra_tools_version}.simg' for sra_tools_version in SRA_TOOLS]

#rule def_to_simg:
#    """compile single .def file to single .simg file"""
#    output:
#        '{name}.simg'
#    input:
#        '{name}.def'
#    shell:
#        "{SB} {output} {input}"
